######################
SSH  BASIC COMMANDS :-
######################
  
    • ssh user@serverip       - to join a server using ssh
    • ssh-copy-id             - configures a public key as authorized on a server
    • sshd                    - Open SSH server
    • ssh-agent               - agent to hold private key for single sign-on
    • ssh-add                 - tool to add a key to the agent
    • scp                     - file transfer client with RCP-like command interface
    • sftp                    - file transfer client with FTP-like command interface 
    
    
#################################################################################################################################################################################
    
    
###########################
SSH command line options :- 
###########################

    • -1    - Use protocol version 1 only.
    • -2    - Use protocol version 2 only.
    • -4    - Use IPv4 addresses only.
    • -6    - Use IPv6 addresses only.
    • -A    - Enable forwarding of the authentication agent connection.
    • -a    - Disable forwarding of the authentication agent connection.
    • -C    - Use data compression
    • -c    - cipher_spec Selects the cipher specification for encrypting the session.
    • -D    - [bind_address:]port Dynamic application-level port forwarding. This allocates a socket to listen to port on the local side. When a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine.
    • -E    - log_file Append debug logs to log_file instead of standard error.
    • -F    - configfile Specifies a per-user configuration file. The default for the per-user configuration file is ~/.ssh/config.
    • -g    - Allows remote hosts to connect to local forwarded ports.
    • -i    - identity_file A file from which the identity key (private key) for public key authentication is read.
    • -J    - [user@]host[:port] Connect to the target host by first making a ssh connection to the pjump host[(/iam/jump-host) and then establishing a TCP forwarding to the ultimate destination from there.
    • -l    - login_name Specifies the user to log in as on the remote machine.
    • -p    - port Port to connect to on the remote host.
    • -q    - Quiet mode.
    • -V    - Display the version number.
    • -v    - Verbose mode.
    • -X    - Enables X11 forwarding.
    
  
##################################################################################################################################################################################


###########################
Key Based Authentication :-
###########################


Step 1
---------------— Creating SSH Keys -------------------------

  ( By defaults it creates a pair of 3072 bits RSA key )
  ( Path ~/root/.ssh directories )
  ( two keys name 1. id_rsa (PRIVATE KEY)
                  2. Id_rsa.pub (PUBLIC KEY) )
   • ssh-keygen
   
Step 2  ( The content of your id_rsa.pub file will have to be added to a file at ~/.ssh/authorized_keys on your remote machine somehow.)
—--------------Copying an SSH Public Key to Your Server--------------------------------------

   • ssh-copy-id username@server's ip 
      • yes
          • server password (not Visiable)
          

-----------------Copying Your Public Key Using SSH----------------------------------------------

   • cat ~/.ssh/id_rsa.pub | ssh username@remote_host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
   
----------------Copying Your Public Key Manually (Once you have access to your account on the remote server, you should make sure the ~/.ssh directory is created )-----------------

    • cat ~/.ssh/id_rsa.pub ( output will be :- ssh-rsa AAAA -----public_key_string--------QQQQQQ== username@hostname )
    • echo public_key_string >> ~/.ssh/authorized_keys

Step 3 
-------------- Authenticating to Your Server Using SSH Keys-----------------------------------
     
     • ssh username@remote_host
         • yes
         
---------------------------------------------------------------SUCESSFUL LOGGIN WITHOUT PASSWORD -----------------------------------


#############################################################################################################################################################################


###################################################
Disabling Password Authentication on your Server :-
###################################################

log into your remote server with SSH keys, either as root or with an account with sudo privileges.
Open the SSH daemon’s configuration file:
      
      • sudo nano /etc/ssh/sshd_config

Inside the file, search for a directive called PasswordAuthentication. This may be commented out. 
Uncomment the line by removing any # at the beginning of the line, and set the value to no. 
This will disable your ability to log in through SSH using account passwords:

     • PasswordAuthentication no
     
Save and close the file when you are finished. To actually implement the changes we just made, you must restart the service

     • sudo systemctl restart ssh


##################################################################################################################################################################################


####################
SET UP SSH BANNER :-
####################

There are two way to display messages
    - one is using issue.net file 
    - second one is using MOTD file.

    issue.net : Display a banner message before the password login prompt.
    motd : Display a banner message after the user has logged in.
    
    BOTH are in the etc folder 
    
    After that restart by command 
    
     •  sudo systemctl restart ssh.service 


################################################################################################################################################################################

    
